@page "/counter"
@using System.Text
@using EmojiBlazor.Model
@using EmojiEngine

<PageTitle>Counter</PageTitle>

<p role="status">Current count: @currentCount</p>
<div class="field">@text</div>

<button class="btn btn-primary" @onclick="Down">Down</button>
<button class="btn btn-primary" @onclick="Up">Up</button>
<button class="btn btn-primary" @onclick="Left">Left</button>
<button class="btn btn-primary" @onclick="Right">Right</button>
<input id="gamepad" type="text" @onkeydown="@Enter" />
@code {
    private int currentCount = 0;
    private string text =string.Empty;
    private static int fieldSize = 6;

    private Player player = new Player("🐈", () => fieldSize - 1);
    private DevilEnemy enemy  = new DevilEnemy(() => fieldSize - 1);
    private Level _level = new Level(fieldSize, new Tree());

    [Inject] private IJSRuntime _js { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _level.EmojiObjects.Add(player);
        _level.EmojiObjects.Add(enemy);
        Move();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await _js.InvokeAsync<bool>("SetFocusByElementId", "gamepad");

        await base.OnAfterRenderAsync(firstRender);
    }

    private void Move()
    {
        text = _level.DoFrame();
    }


    private void Down()
    {
        enemy.MoveEnemy();
        player.Down();
        Move();
    }   

    private void Up()
    {
        player.Up();
        enemy.MoveEnemy();
        Move();
    }   

    private void Left()
    {
        enemy.MoveEnemy();
        player.Left();
        Move();
    }   

    private void Right()
    {
        enemy.MoveEnemy();
        player.Right();
        Move();
    }

    private void  MoveEnemy()
    {
        Random random = new Random();
        int move = random.Next(0, 100);

        if (move < 25 && enemy.X < fieldSize - 1)
        {
            enemy.X++;
        }
        else if (move < 50 && enemy.X > 0)
        {
            enemy.X--;
        }
        else if (move < 75 && enemy.Y < fieldSize - 1)
        {
            enemy.Y++;
        } 
        else if (enemy.Y > 0)
        {
            enemy.Y--;
        }
    }

    public void Enter(KeyboardEventArgs e)
    {
        switch (e.Code)
        {
            case "ArrowDown":
                Down();
                break;
            case "ArrowUp":
                Up();
                break;  
            case "ArrowLeft":
                Left();
                break; 
            case "ArrowRight":
                Right();
                break;
        }
    }
}
